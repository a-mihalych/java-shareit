CREATE TABLE IF NOT EXISTS USERS (
     USER_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
     USER_NAME VARCHAR(64) NOT NULL,
     EMAIL     VARCHAR(64) NOT NULL,
     CONSTRAINT PK_USER PRIMARY KEY (USER_ID),
     CONSTRAINT UQ_USER_EMAIL UNIQUE (EMAIL)
);

CREATE TABLE IF NOT EXISTS REQUESTS (
    REQUEST_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    DESCRIPTION  VARCHAR(256) NOT NULL,
    CREATED      TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    REQUESTOR_ID BIGINT,
    CONSTRAINT PK_REQUEST PRIMARY KEY (REQUEST_ID),
    CONSTRAINT FK_REQUESTOR FOREIGN KEY (REQUESTOR_ID)
        REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS ITEMS (
     ITEM_ID      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
     ITEM_NAME    VARCHAR(64) NOT NULL,
     DESCRIPTION  VARCHAR(256) NOT NULL,
     IS_AVAILABLE BOOLEAN NOT NULL,
     OWNER_ID     BIGINT,
     REQUEST_ID   BIGINT,
     CONSTRAINT PK_ITEM PRIMARY KEY (ITEM_ID),
     CONSTRAINT FK_USER FOREIGN KEY (OWNER_ID)
         REFERENCES USERS (USER_ID),
     CONSTRAINT FK_REQUEST FOREIGN KEY (REQUEST_ID)
         REFERENCES REQUESTS (REQUEST_ID)
);

CREATE TABLE IF NOT EXISTS BOOKINGS (
    BOOKING_ID  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    START_TIME  TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    END_TIME    TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    ITEM_ID     BIGINT,
    BOOKER_ID   BIGINT,
    STATUS      VARCHAR,
    CONSTRAINT PK_BOOKING PRIMARY KEY (BOOKING_ID),
    CONSTRAINT FK_ITEM FOREIGN KEY (ITEM_ID)
        REFERENCES ITEMS (ITEM_ID),
    CONSTRAINT FK_BOOKER FOREIGN KEY (BOOKER_ID)
        REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS COMMENTS (
    COMMENT_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    COMMENT_TEXT VARCHAR NOT NULL,
    ITEM_ID      BIGINT  NOT NULL,
    AUTHOR_ID    BIGINT  NOT NULL,
    CREATED      TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT PK_COMMENT PRIMARY KEY (COMMENT_ID),
    CONSTRAINT FK_ITEM_COMMENT FOREIGN KEY (ITEM_ID)
        REFERENCES ITEMS (ITEM_ID),
    CONSTRAINT FK_AUTHOR FOREIGN KEY (AUTHOR_ID)
        REFERENCES USERS (USER_ID)
);
